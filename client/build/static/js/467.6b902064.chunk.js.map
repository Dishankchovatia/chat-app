{"version":3,"file":"static/js/467.6b902064.chunk.js","mappings":"8RAUe,SAASA,IACtB,MAAMC,EAAG,sCACHC,GAAWC,EAAAA,EAAAA,OACVC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,KAChCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAgBC,IAAqBJ,EAAAA,EAAAA,eAASK,GAC/CC,EAAe,CACnBC,SAAU,eACVC,UAAW,IACXC,cAAc,EACdC,WAAW,EACXC,MAAO,SAGTC,EAAAA,EAAAA,YAAU,KACHC,aAAaC,QAAQC,0BACxBnB,EAAS,SAAS,GACnB,CAACA,IA6CJ,OAjBAgB,EAAAA,EAAAA,YAAU,KACUI,WAChB,MAAMC,EAAO,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMC,QAAcC,EAAAA,EAAMC,IAAI,GAADC,OACxB3B,EAAG,KAAA2B,OAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,YAEtBC,EAAS,IAAIC,EAAAA,GAAOR,EAAMF,MAChCA,EAAKW,KAAKF,EAAOG,SAAS,UAC5B,CACA9B,EAAWkB,GACXf,GAAa,EAAM,EAGrB4B,EAAW,GACV,CAACnC,KAGFoC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGhC,GACC8B,EAAAA,EAAAA,KAACG,EAAS,CAAAD,UACRF,EAAAA,EAAAA,KAAA,OAAKI,IAAKC,EAAQC,IAAI,SAASC,UAAU,cAG3CC,EAAAA,EAAAA,MAACL,EAAS,CAAAD,SAAA,EACRF,EAAAA,EAAAA,KAAA,OAAKO,UAAU,kBAAiBL,UAC9BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,8CAENF,EAAAA,EAAAA,KAAA,OAAKO,UAAU,UAASL,SACrBnC,EAAQ0C,KAAI,CAACC,EAAQC,KAElBX,EAAAA,EAAAA,KAAA,OAEEO,UAAS,UAAAhB,OACPnB,IAAmBuC,EAAQ,WAAa,IACvCT,UAEHF,EAAAA,EAAAA,KAAA,OACEI,IAAG,6BAAAb,OAA+BmB,GAClCJ,IAAI,SAEJM,QAASA,IAAMvC,EAAkBsC,IAD5BD,IARFC,QAebX,EAAAA,EAAAA,KAAA,UAAQY,QAzEU3B,UACxB,QAAuBX,IAAnBF,EACFyC,EAAAA,GAAMC,MAAM,0BAA2BvC,OAClC,CACL,MAAMwC,QAAaC,KAAKC,MACtBnC,aAAaC,QAAQC,2BAGjB,KAAEE,SAAeG,EAAAA,EAAM6B,KAAK,GAAD3B,OAAI4B,EAAAA,GAAc,KAAA5B,OAAIwB,EAAKK,KAAO,CACjEhC,MAAOrB,EAAQK,KAGbc,EAAKmC,OACPN,EAAKO,kBAAmB,EACxBP,EAAKQ,YAAcrC,EAAKE,MACxBN,aAAa0C,QACXxC,wBACAgC,KAAKS,UAAUV,IAEjBlD,EAAS,MAETgD,EAAAA,GAAMC,MAAM,0CAA2CvC,EAE3D,GAkD0CgC,UAAU,aAAYL,SAAC,4BAG3DF,EAAAA,EAAAA,KAAC0B,EAAAA,GAAc,QAKzB,CAEA,MAAMvB,EAAYwB,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6gC,0GChHrB,MAAMC,EAAO,wBACPC,EAAU,GAAAzC,OAAMwC,EAAI,mBACpBE,EAAa,GAAA1C,OAAMwC,EAAI,sBAEvBG,GADW,GAAA3C,OAAMwC,EAAI,oBACR,GAAAxC,OAAMwC,EAAI,uBACvBI,EAAgB,GAAA5C,OAAMwC,EAAI,wBAC1BK,EAAmB,GAAA7C,OAAMwC,EAAI,wBAC7BZ,EAAc,GAAA5B,OAAMwC,EAAI,uBACxBM,EAAkB,GAAA9C,OAAMwC,EAAI,2BAC5BO,EAAkB,GAAA/C,OAAMwC,EAAI,2BACjB,GAAAxC,OAAMwC,EAAI,wB","sources":["components/SetAvatar.jsx","utils/APIRoutes.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport axios from \"axios\";\r\nimport { Buffer } from \"buffer\";\r\nimport loader from \"../assets/loader.gif\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { setAvatarRoute } from \"../utils/APIRoutes\";\r\n\r\nexport default function SetAvatar() {\r\n  const api = `https://api.multiavatar.com/4645646`;\r\n  const navigate = useNavigate();\r\n  const [avatars, setAvatars] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [selectedAvatar, setSelectedAvatar] = useState(undefined);\r\n  const toastOptions = {\r\n    position: \"bottom-right\",\r\n    autoClose: 8000,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    theme: \"dark\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY))\r\n      navigate(\"/login\");\r\n  }, [navigate]);\r\n\r\n  const setProfilePicture = async () => {\r\n    if (selectedAvatar === undefined) {\r\n      toast.error(\"Please select an avatar\", toastOptions);\r\n    } else {\r\n      const user = await JSON.parse(\r\n        localStorage.getItem(process.env.REACT_APP_LOCALHOST_KEY)\r\n      );\r\n\r\n      const { data } = await axios.post(`${setAvatarRoute}/${user._id}`, {\r\n        image: avatars[selectedAvatar],\r\n      });\r\n\r\n      if (data.isSet) {\r\n        user.isAvatarImageSet = true;\r\n        user.avatarImage = data.image;\r\n        localStorage.setItem(\r\n          process.env.REACT_APP_LOCALHOST_KEY,\r\n          JSON.stringify(user)\r\n        );\r\n        navigate(\"/\");\r\n      } else {\r\n        toast.error(\"Error setting avatar. Please try again.\", toastOptions);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getavatar = async () => {\r\n      const data = [];\r\n      for (let i = 0; i < 4; i++) {\r\n        const image = await axios.get(\r\n          `${api}/${Math.round(Math.random() * 1000)}`\r\n        );\r\n        const buffer = new Buffer(image.data);\r\n        data.push(buffer.toString(\"base64\"));\r\n      }\r\n      setAvatars(data);\r\n      setIsLoading(false);\r\n    };\r\n\r\n    getavatar();\r\n  }, [api]);\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Container>\r\n          <img src={loader} alt=\"loader\" className=\"loader\" />\r\n        </Container>\r\n      ) : (\r\n        <Container>\r\n          <div className=\"title-container\">\r\n            <h1>Pick an Avatar as your profile picture</h1>\r\n          </div>\r\n          <div className=\"avatars\">\r\n            {avatars.map((avatar, index) => {\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  className={`avatar ${\r\n                    selectedAvatar === index ? \"selected\" : \"\"\r\n                  }`}\r\n                >\r\n                  <img\r\n                    src={`data:image/svg+xml;base64,${avatar}`}\r\n                    alt=\"avatar\"\r\n                    key={avatar}\r\n                    onClick={() => setSelectedAvatar(index)}\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <button onClick={setProfilePicture} className=\"submit-btn\">\r\n            Set as Profile Picture\r\n          </button>\r\n          <ToastContainer />\r\n        </Container>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  gap: 3rem;\r\n  background-color: #131324;\r\n  height: 100vh;\r\n  width: 100vw;\r\n\r\n  .loader {\r\n    max-inline-size: 100%;\r\n  }\r\n\r\n  .title-container {\r\n    h1 {\r\n      color: white;\r\n    }\r\n  }\r\n  .avatars {\r\n    display: flex;\r\n    gap: 2rem;\r\n\r\n    .avatar {\r\n      border: 0.4rem solid transparent;\r\n      padding: 0.4rem;\r\n      border-radius: 5rem;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      transition: 0.5s ease-in-out;\r\n      img {\r\n        height: 6rem;\r\n        transition: 0.5s ease-in-out;\r\n      }\r\n    }\r\n    .selected {\r\n      border: 0.4rem solid #4e0eff;\r\n    }\r\n  }\r\n  .submit-btn {\r\n    background-color: #4e0eff;\r\n    color: white;\r\n    padding: 1rem 2rem;\r\n    border: none;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    border-radius: 0.4rem;\r\n    font-size: 1rem;\r\n    text-transform: uppercase;\r\n    &:hover {\r\n      background-color: #4e0eff;\r\n    }\r\n  }\r\n`;\r\n","export const host = \"http://localhost:5000\";\r\nexport const loginRoute = `${host}/api/auth/login`;\r\nexport const registerRoute = `${host}/api/auth/register`;\r\nexport const logoutRoute = `${host}/api/auth/logout`;\r\nexport const allUsersRoute = `${host}/api/auth/allusers`;\r\nexport const sendMessageRoute = `${host}/api/messages/addmsg`;\r\nexport const recieveMessageRoute = `${host}/api/messages/getmsg`;\r\nexport const setAvatarRoute = `${host}/api/auth/setavatar`;\r\nexport const checkUserNameRoute = `${host}/api/auth/checkusername`;\r\nexport const firebaseLoginRoute = `${host}/api/auth/firebaselogin`;\r\nexport const setuserName = `${host}/api/auth/setusername`;"],"names":["SetAvatar","api","navigate","useNavigate","avatars","setAvatars","useState","isLoading","setIsLoading","selectedAvatar","setSelectedAvatar","undefined","toastOptions","position","autoClose","pauseOnHover","draggable","theme","useEffect","localStorage","getItem","process","async","data","i","image","axios","get","concat","Math","round","random","buffer","Buffer","push","toString","getavatar","_jsx","_Fragment","children","Container","src","loader","alt","className","_jsxs","map","avatar","index","onClick","toast","error","user","JSON","parse","post","setAvatarRoute","_id","isSet","isAvatarImageSet","avatarImage","setItem","stringify","ToastContainer","styled","div","_templateObject","_taggedTemplateLiteral","host","loginRoute","registerRoute","allUsersRoute","sendMessageRoute","recieveMessageRoute","checkUserNameRoute","firebaseLoginRoute"],"sourceRoot":""}